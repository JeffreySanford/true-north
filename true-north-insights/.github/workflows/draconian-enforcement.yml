name: Draconian Angular Enforcement Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  NODE_VERSION: '18'
  DRACONIAN_MODE: 'strict'

jobs:
  # PHASE 1: CRITICAL VIOLATIONS - Zero Tolerance
  critical-validation:
    name: 🚨 Critical Violations Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        run: |
          npm ci
          cd tools && npm ci
          
      - name: 🛡️ DRACONIAN LINTING - Zero Tolerance
        run: |
          echo "🔍 Running draconian linting with zero tolerance..."
          npm run lint:strict
          
      - name: 🔒 TYPE SAFETY VALIDATION - Strict Mode
        run: |
          echo "🔍 Validating type safety with strict TypeScript..."
          npx tsc --noEmit --strict
          
      - name: 🚫 ANTI-PATTERN DETECTION
        run: |
          echo "🔍 Scanning for forbidden patterns..."
          # Check for standalone components
          if grep -r "standalone.*true" --include="*.ts" src/; then
            echo "❌ DRACONIAN VIOLATION: Standalone components detected"
            exit 1
          fi
          
          # Check for inject() usage
          if grep -r "inject(" --include="*.ts" src/ --exclude-dir=node_modules; then
            echo "❌ DRACONIAN VIOLATION: inject() function usage detected"
            exit 1
          fi
          
          # Check for async/await in services
          if grep -r -A5 -B5 "async.*(" --include="*.service.ts" src/; then
            echo "❌ DRACONIAN VIOLATION: async/await in services detected"
            exit 1
          fi
          
          echo "✅ No anti-patterns detected"

  # PHASE 2: COMPREHENSIVE TESTING
  comprehensive-testing:
    name: 🧪 Comprehensive Testing Suite
    runs-on: ubuntu-latest
    needs: critical-validation
    timeout-minutes: 20
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: 🎯 UNIT TESTING - Coverage Required
        run: |
          echo "🧪 Running unit tests with coverage requirements..."
          npm run test:coverage
          
      - name: 📊 COVERAGE VALIDATION - Federal Standards
        run: |
          echo "📊 Validating test coverage meets federal requirements..."
          # Validate coverage is >= 95%
          COVERAGE=$(npx nyc report --reporter=text-summary | grep "Lines" | grep -o '[0-9.]*%' | head -1 | sed 's/%//')
          echo "Current coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 95" | bc -l) )); then
            echo "❌ COVERAGE VIOLATION: ${COVERAGE}% is below required 95%"
            exit 1
          fi
          echo "✅ Coverage requirement met: ${COVERAGE}%"
          
      - name: 🎭 E2E TESTING - Multi-Browser
        run: |
          echo "🎭 Running E2E tests across multiple browsers..."
          npm run test:e2e
          
      - name: 🔍 OBSERVABLE PATTERN VALIDATION
        run: |
          echo "🔍 Validating Observable patterns in services..."
          # Check that all service methods return Observables
          for file in $(find src -name "*.service.ts"); do
            if grep -q "Promise\|async" "$file"; then
              echo "❌ OBSERVABLE VIOLATION in $file: Found Promise or async patterns"
              exit 1
            fi
          done
          echo "✅ All services use Observable patterns"

  # PHASE 3: PERFORMANCE VALIDATION
  performance-validation:
    name: ⚡ Performance & Bundle Validation
    runs-on: ubuntu-latest
    needs: comprehensive-testing
    timeout-minutes: 15
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        run: |
          npm ci
          cd tools && npm ci
          
      - name: 🚀 PRODUCTION BUILD - Performance Test
        run: |
          echo "🚀 Building for production with performance validation..."
          npm run build:prod
          
      - name: 📦 BUNDLE SIZE VALIDATION - Federal Limits
        run: |
          echo "📦 Validating bundle size meets federal requirements..."
          npm run validate:bundle
          
      - name: ⚡ BUILD PERFORMANCE CHECK
        run: |
          echo "⚡ Validating build performance..."
          START_TIME=$(date +%s)
          npm run build:prod
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          
          echo "Build time: ${BUILD_TIME} seconds"
          if [ $BUILD_TIME -gt 45 ]; then
            echo "❌ BUILD PERFORMANCE VIOLATION: ${BUILD_TIME}s exceeds 45s limit"
            exit 1
          fi
          echo "✅ Build performance meets requirements: ${BUILD_TIME}s"
          
      - name: 🎯 LIGHTHOUSE AUDIT
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: '.lighthouserc.json'
          
  # PHASE 4: SECURITY & COMPLIANCE
  security-compliance:
    name: 🔐 Security & Federal Compliance
    runs-on: ubuntu-latest
    needs: performance-validation
    timeout-minutes: 10
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: 🛡️ SECURITY AUDIT - Zero Vulnerabilities
        run: |
          echo "🛡️ Running security audit with zero tolerance..."
          npm audit --audit-level high
          
      - name: 🔍 DEPENDENCY VALIDATION
        run: |
          echo "🔍 Validating dependencies for federal compliance..."
          # Check for vulnerable packages
          npm audit --json > audit.json
          CRITICAL=$(cat audit.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length')
          HIGH=$(cat audit.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length')
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "❌ SECURITY VIOLATION: Found $CRITICAL critical and $HIGH high severity vulnerabilities"
            exit 1
          fi
          echo "✅ No critical or high severity vulnerabilities found"
          
      - name: 📋 COMPLIANCE DOCUMENTATION CHECK
        run: |
          echo "📋 Validating compliance documentation..."
          # Check for required documentation
          required_docs=(
            "documentation/development/DRACONIAN_ANGULAR_STANDARDS.md"
            "documentation/development/REQUIREMENTS_SPECIFICATION.md"
            "documentation/development/PROJECT_STATUS.md"
          )
          
          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "❌ COMPLIANCE VIOLATION: Missing required document: $doc"
              exit 1
            fi
          done
          echo "✅ All required compliance documentation present"

  # PHASE 5: DEPLOYMENT READINESS
  deployment-readiness:
    name: 🚀 Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: security-compliance
    if: github.ref == 'refs/heads/master'
    timeout-minutes: 5
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: 📊 FINAL VALIDATION SUMMARY
        run: |
          echo "📊 DRACONIAN VALIDATION COMPLETE - DEPLOYMENT READY"
          echo ""
          echo "✅ Critical Violations: PASSED (Zero tolerance enforcement)"
          echo "✅ Comprehensive Testing: PASSED (>95% coverage)"
          echo "✅ Performance Validation: PASSED (Bundle <2MB, Build <45s)"
          echo "✅ Security Compliance: PASSED (Zero vulnerabilities)"
          echo "✅ Federal Documentation: PASSED (All requirements met)"
          echo ""
          echo "🎯 LEGENDARY STANDARDS MAINTAINED - READY FOR PRODUCTION"
          
      - name: 🏆 SUCCESS NOTIFICATION
        if: success()
        run: |
          echo "🏆 DRACONIAN ENFORCEMENT SUCCESS"
          echo "All validation phases completed successfully."
          echo "Code meets federal contracting standards."
          echo "Deployment authorized for production environment."

  # FAILURE HANDLING
  failure-notification:
    name: ❌ Failure Notification
    runs-on: ubuntu-latest
    needs: [critical-validation, comprehensive-testing, performance-validation, security-compliance]
    if: failure()
    
    steps:
      - name: 💥 VALIDATION FAILURE ALERT
        run: |
          echo "💥 DRACONIAN VALIDATION FAILED"
          echo ""
          echo "❌ One or more validation phases failed"
          echo "❌ Code does NOT meet draconian standards"
          echo "❌ Deployment BLOCKED until violations are resolved"
          echo ""
          echo "🛠️  Required Actions:"
          echo "   1. Fix all ESLint violations (zero tolerance)"
          echo "   2. Ensure 100% test coverage"
          echo "   3. Resolve security vulnerabilities"
          echo "   4. Meet performance requirements"
          echo "   5. Complete compliance documentation"
          echo ""
          echo "💪 Legendary standards demand legendary commitment!"
          exit 1